name: PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41

      - name: Get PR diff
        id: pr-diff
        run: |
          git diff --unified=3 ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr.diff
          echo "PR Diff content:"
          cat pr.diff

      - name: Review PR
        env:
          MIRA_API_KEY: ${{ secrets.MIRA_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const https = require('https');
            const diff = fs.readFileSync('pr.diff', 'utf8');

            // Function to make Mira API request with retries
            async function callMiraAI(messages, maxRetries = 3) {
              const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
              
              for (let attempt = 1; attempt <= maxRetries; attempt++) {
                try {
                  const response = await new Promise((resolve, reject) => {
                    const data = JSON.stringify({
                      model: "llama-3.3-70b-instruct",
                      messages: messages,
                      stream: false
                    });

                    const options = {
                      protocol: 'https:',
                      hostname: 'api.mira.network',
                      path: '/v1/chat/completions',
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${process.env.MIRA_API_KEY}`,
                      }
                    };

                    const req = https.request(options, (res) => {
                      console.log('Response Status Code:', res.statusCode);
                      console.log('Response Headers:', JSON.stringify(res.headers, null, 2));
                      
                      let responseData = '';
                      res.on('data', (chunk) => { responseData += chunk; });
                      res.on('end', () => {
                        try {
                          console.log('Raw API Response:', responseData);
                          
                          // Check status code before trying to parse JSON
                          if (res.statusCode === 403) {
                            reject(new Error(`API returned 403 Forbidden - Check if MIRA_API_KEY is correct and has proper permissions. Current key prefix: ${process.env.MIRA_API_KEY?.substring(0, 10)}...`));
                            return;
                          }
                          
                          const parsedData = JSON.parse(responseData);
                          console.log('Parsed API Response:', JSON.stringify(parsedData, null, 2));
                          if (parsedData.error) {
                            console.log('API Error:', parsedData.error);
                            reject(new Error(parsedData.error.message));
                          } else {
                            resolve(parsedData);
                          }
                        } catch (error) {
                          console.log('JSON Parse Error:', error);
                          reject(error);
                        }
                      });
                    });

                    req.on('error', (error) => {
                      console.log('Request Error:', error);
                      reject(error);
                    });

                    // Log the outgoing request details
                    console.log('Request Options:', JSON.stringify({
                      ...options,
                      headers: {
                        ...options.headers,
                        'Authorization': 'Bearer sk-mira-****' // Masked for security
                      }
                    }, null, 2));

                    req.write(data);
                    req.end();
                  });

                  // Check if response has the expected structure
                  if (!response?.data?.choices?.[0]?.message?.content) {
                    console.log('Invalid Response Structure:', response);
                    throw new Error('Invalid response structure from API');
                  }

                  return response.data.choices[0].message.content;
                } catch (error) {
                  console.log(`Attempt ${attempt} error:`, error.message);
                  
                  if (attempt === maxRetries) {
                    throw error;
                  }
                  
                  console.log(`Retrying after delay... (Attempt ${attempt}/${maxRetries})`);
                  await delay(2000 * attempt); // Exponential backoff
                }
              }
            }

            try {
              const prompt = `Review the following pull request changes:

              ${diff}

              Provide a concise review focusing on:
              1. Potential bugs or issues
              2. Security concerns
              3. Performance implications
              4. Specific improvement suggestions
              
              Be direct and focus only on significant findings.`;

              const messages = [
                { 
                  role: "system", 
                  content: "You are a precise and thorough code reviewer. Focus on concrete issues and actionable feedback." 
                },
                { role: "user", content: prompt }
              ];

              const review = await callMiraAI(messages);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: review
              });
            } catch (error) {
              core.setFailed(`Error during PR review: ${error.message}`);
            }
