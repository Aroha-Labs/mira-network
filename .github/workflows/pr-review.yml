name: PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41

      - name: Get PR diff
        id: pr-diff
        run: |
          git diff --unified=3 ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr.diff

      - name: Review PR
        env:
          MIRA_API_KEY: ${{ secrets.MIRA_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const https = require('https');
            const diff = fs.readFileSync('pr.diff', 'utf8');

            // Function to make Mira API request
            async function callMiraAI(messages) {
              return new Promise((resolve, reject) => {
                const data = JSON.stringify({
                  model: "llama-3.3-70b-instruct",
                  messages: messages,
                  stream: false
                });

                const options = {
                  hostname: 'apis.mira.network',
                  path: '/v1/chat/completions',
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.MIRA_API_KEY}`,
                  }
                };

                const req = https.request(options, (res) => {
                  let responseData = '';
                  res.on('data', (chunk) => { responseData += chunk; });
                  res.on('end', () => {
                    try {
                      const parsedData = JSON.parse(responseData);
                      if (parsedData.error) {
                        reject(new Error(parsedData.error.message));
                      } else {
                        resolve(parsedData.choices[0].message.content);
                      }
                    } catch (error) {
                      reject(error);
                    }
                  });
                });

                req.on('error', (error) => {
                  reject(error);
                });

                req.write(data);
                req.end();
              });
            }

            // Function to split diff into chunks
            function splitDiffIntoChunks(diff, maxChunkSize = 4000) {
              const diffLines = diff.split('\n');
              const chunks = [];
              let currentChunk = [];
              let currentSize = 0;

              for (const line of diffLines) {
                const lineSize = line.length + 1; // +1 for newline
                if (currentSize + lineSize > maxChunkSize && currentChunk.length > 0) {
                  chunks.push(currentChunk.join('\n'));
                  currentChunk = [];
                  currentSize = 0;
                }
                currentChunk.push(line);
                currentSize += lineSize;
              }

              if (currentChunk.length > 0) {
                chunks.push(currentChunk.join('\n'));
              }

              return chunks;
            }

            try {
              const diffChunks = splitDiffIntoChunks(diff);
              let fullReview = '';

              for (let i = 0; i < diffChunks.length; i++) {
                const prompt = `Review part ${i + 1}/${diffChunks.length} of the pull request changes:

                ${diffChunks[i]}

                ${i === diffChunks.length - 1 ? `
                Provide a final summary with:
                1. Brief summary of all changes
                2. Key concerns (if any)
                3. Suggestions
                4. Code quality rating (1-5)
                ` : 'Analyze these changes and note any important findings.'}`;

                const messages = [
                  { 
                    role: "system", 
                    content: "You are a concise code reviewer. Focus on the most important aspects." 
                  },
                  { role: "user", content: prompt }
                ];

                const review = await callMiraAI(messages);
                fullReview += i === 0 ? review : `\n\n${review}`;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: fullReview
              });
            } catch (error) {
              core.setFailed(`Error during PR review: ${error.message}`);
            }
