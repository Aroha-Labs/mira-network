name: Create Tag

on:
  workflow_call:
    outputs:
      new_tag:
        value: ${{ jobs.create-tag.outputs.new_tag }}
      notes:
        value: ${{ jobs.create-tag.outputs.notes }}

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      notes: ${{ steps.release_notes.outputs.notes }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          latest_ver=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$latest_ver"
          new_patch=$((patch + 1))

          # Function to check if tag exists
          tag_exists() {
            git rev-parse "$1" >/dev/null 2>&1
          }

          # Find next available tag
          while true; do
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              new_tag="v$major.$minor.$new_patch"
            else
              new_tag="v$major.$minor.$new_patch-dev"
            fi

            if ! tag_exists "$new_tag"; then
              break
            fi
            new_patch=$((new_patch + 1))
          done

          echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
          echo "Creating new tag: $new_tag"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and push tag with error handling
          if git tag -a $new_tag -m "Release $new_tag" && git push origin $new_tag; then
            echo "Successfully created and pushed tag $new_tag"
          else
            echo "Failed to create or push tag"
            exit 1
          fi

      - name: Generate Release Notes
        id: release_notes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install only OpenAI package
          npm install openai

          # Create and run the release notes generator script
          cat > generate-notes.js << 'EOF'
          const OpenAI = require('openai');

          async function main() {
            try {
              const openai = new OpenAI({
                apiKey: process.env.OPENAI_API_KEY
              });
              
              // Get repository details from GitHub URL
              const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
              
              // Get the comparison between tags using GitHub API
              const response = await fetch(
                `https://api.github.com/repos/${owner}/${repo}/compare/${process.env.LAST_TAG}...${process.env.NEW_TAG}`,
                {
                  headers: {
                    'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                  }
                }
              );
              
              const comparison = await response.json();
              
              const diff = comparison.files
                .map(file => `${file.filename} | ${file.additions} additions, ${file.deletions} deletions`)
                .join('\n');
              
              if (!diff) {
                throw new Error('No diff found between tags');
              }
              
              // Generate release notes using OpenAI
              const completion = await openai.chat.completions.create({
                model: "gpt-4-1106-preview",
                messages: [
                  {
                    role: "system",
                    content: "You are a technical writer creating release notes. Only describe changes that are explicitly present in the provided diff - do not add, assume, or infer any additional changes. Use clear, professional language and organize changes into relevant sections: New Features, Improvements, Bug Fixes, or Technical Updates. If a section has no changes, omit it entirely. Each note should directly correspond to a specific change in the diff."
                  },
                  {
                    role: "user",
                    content: `Based on the following changes, generate release notes that strictly describe only the actual changes made:\n\n${diff}`
                  }
                ],
                temperature: 0.3,
                max_tokens: 1000
              });
              
              const notes = completion.choices[0].message.content;
              require('fs').writeFileSync('release_notes.txt', notes);
            } catch (error) {
              console.error('Error generating release notes:', error);
              // Provide a default message if generation fails
              const defaultNotes = `# Release ${process.env.NEW_TAG}\n\n` +
                                 `## Overview\n` +
                                 `This release includes updates to the system components.\n\n` +
                                 `Please refer to the commit history for specific changes.\n`;
              require('fs').writeFileSync('release_notes.txt', defaultNotes);
              process.exit(0); // Don't fail the workflow
            }
          }

          main().catch(error => {
            console.error('Unhandled error:', error);
            const defaultNotes = `# Release ${process.env.NEW_TAG}\n\n` +
                               `## Overview\n` +
                               `This release includes updates to the system components.\n\n` +
                               `Please refer to the commit history for specific changes.\n`;
            require('fs').writeFileSync('release_notes.txt', defaultNotes);
            process.exit(0); // Don't fail the workflow
          });
          EOF

          # Run the script
          NEW_TAG=${{ steps.tag_version.outputs.new_tag }} \
          LAST_TAG=$(git describe --tags --abbrev=0 ${{ steps.tag_version.outputs.new_tag }}^) \
          node generate-notes.js

          # Save the release notes path as output
          mv release_notes.txt release_notes_${{ steps.tag_version.outputs.new_tag }}.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body_path: release_notes_${{ steps.tag_version.outputs.new_tag }}.md
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
