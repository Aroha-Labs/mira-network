"""merge user credits to users table, and fields optional

Revision ID: b444557df1e6
Revises: 9c5687096422
Create Date: 2025-01-16 15:13:43.740205

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b444557df1e6"
down_revision: Union[str, None] = "9c5687096422"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add credits column first
    op.add_column(
        "user", sa.Column("credits", sa.Float(), server_default="0", nullable=False)
    )

    # Migrate data from usercredits to user table
    op.execute(
        """
        UPDATE "user" u
        SET credits = COALESCE((
            SELECT credits 
            FROM usercredits uc 
            WHERE uc.user_id = u.user_id 
            ORDER BY created_at DESC 
            LIMIT 1
        ), 0)
    """
    )

    # Now drop the old table
    op.drop_table("usercredits")

    # Rest of the migration
    op.alter_column("user", "user_id", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("user", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("user", "full_name", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("user", "provider", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "user", "last_login_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "user",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=True,
    )
    op.drop_constraint("user_user_id_key", "user", type_="unique")
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=False)
    op.create_index(op.f("ix_user_full_name"), "user", ["full_name"], unique=False)
    op.create_index(op.f("ix_user_user_id"), "user", ["user_id"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create usercredits table first
    op.create_table(
        "usercredits",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "credits",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="usercredits_pkey"),
    )

    # Migrate data back to usercredits table
    op.execute(
        """
        INSERT INTO usercredits (user_id, credits, created_at, updated_at)
        SELECT user_id, credits, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
        FROM "user"
        WHERE credits != 0
    """
    )

    # Rest of the downgrade
    op.drop_index(op.f("ix_user_user_id"), table_name="user")
    op.drop_index(op.f("ix_user_full_name"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.create_unique_constraint("user_user_id_key", "user", ["user_id"])
    op.alter_column(
        "user",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "user", "last_login_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column("user", "provider", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("user", "full_name", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("user", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("user", "user_id", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("user", "credits")
    # ### end Alembic commands ###
